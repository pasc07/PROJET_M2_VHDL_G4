
test_anem.elf:     file format elf32-littlenios2
test_anem.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000ce0 memsz 0x00000ce0 flags r-x
    LOAD off    0x00001d00 vaddr 0x00008d00 paddr 0x00008df0 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ee0 vaddr 0x00008ee0 paddr 0x00008ee0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001df0  2**0
                  CONTENTS
  2 .text         00000c98  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00008cb8  00008cb8  00001cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00008d00  00008df0  00001d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00008ee0  00008ee0  00001ee0  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00008ef0  00008ef0  00001df0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e8  00000000  00000000  00001e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000037c6  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013f5  00000000  00000000  000058c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000017bb  00000000  00000000  00006cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e4  00000000  00000000  00008478  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ff2  00000000  00000000  0000885c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013b7  00000000  00000000  0000984e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000ac08  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000bf26  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000bf29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000bf35  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000bf36  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000bf37  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000bf42  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000bf4d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000bf58  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  0000bf60  2**0
                  CONTENTS, READONLY
 26 .jdi          00004fda  00000000  00000000  0000bf9d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00044815  00000000  00000000  00010f77  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008cb8 l    d  .rodata	00000000 .rodata
00008d00 l    d  .rwdata	00000000 .rwdata
00008ee0 l    d  .bss	00000000 .bss
00008ef0 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_anem_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008164 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008d00 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008b00 g     F .text	0000002c alt_main
00008df0 g       *ABS*	00000000 __flash_rwdata_start
00008118 g     F .text	0000004c printf
00008b2c g     F .text	00000038 alt_putstr
00008cb0 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008ee0 g     O .bss	00000004 errno
00008ee8 g     O .bss	00000004 alt_argv
00010de0 g       *ABS*	00000000 _gp
00008b64 g     F .text	00000004 usleep
000080dc g     F .text	0000003c _printf_r
0000893c g     F .text	00000064 .hidden __udivsi3
00008000 g       *ABS*	00000000 __alt_mem_ram
00008de0 g     O .rwdata	00000004 _global_impure_ptr
00008ef0 g       *ABS*	00000000 __bss_end
00008ca8 g     F .text	00000004 alt_dcache_flush_all
00008df0 g       *ABS*	00000000 __ram_rwdata_end
00008b68 g     F .text	00000060 write
00008d00 g       *ABS*	00000000 __ram_rodata_end
00008de8 g     O .rwdata	00000004 jtag_uart_0
000089a0 g     F .text	00000058 .hidden __umodsi3
00008ef0 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008bec g     F .text	00000034 altera_avalon_jtag_uart_write
000081d0 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008be8 g     F .text	00000004 alt_sys_init
000089f8 g     F .text	00000028 .hidden __mulsi3
00008d00 g       *ABS*	00000000 __ram_rwdata_start
00008cb8 g       *ABS*	00000000 __ram_rodata_start
00008c20 g     F .text	00000088 alt_busy_sleep
00008ef0 g       *ABS*	00000000 __alt_stack_base
00008718 g     F .text	000000b8 __sfvwrite_small_dev
00008ee0 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000080 main
00008ee4 g     O .bss	00000004 alt_envp
00008dec g     O .rwdata	00000004 alt_errno
00008844 g     F .text	00000084 .hidden __divsi3
00008cb8 g       *ABS*	00000000 __flash_rodata_start
00008bc8 g     F .text	00000020 alt_irq_init
000087ec g     F .text	00000058 _write_r
00008de4 g     O .rwdata	00000004 _impure_ptr
00008eec g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008df0 g       *ABS*	00000000 _edata
00008ef0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000088c8 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000087d0 g     F .text	0000001c strlen
00008cac g     F .text	00000004 alt_icache_flush_all
000086fc g     F .text	0000001c __vfprintf_internal
00008a20 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6837814 	ori	gp,gp,3552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a3b814 	ori	r2,r2,36576

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e3bc14 	ori	r3,r3,36592

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7264>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008a200 	call	8a20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008b000 	call	8b00 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7278>

0000805c <main>:
#include "io.h"

#define reg_inFreq (unsigned int *)(TEST_ANEMO_0_BASE+4)
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
#include "time.h"
#include "io.h"

#define reg_inFreq (unsigned int *)(TEST_ANEMO_0_BASE+4)
int main()
{ 
    8060:	defffc04 	addi	sp,sp,-16
  alt_putstr("Hello from Nios II!\n");
    8064:	21232e04 	addi	r4,r4,-29512
#include "time.h"
#include "io.h"

#define reg_inFreq (unsigned int *)(TEST_ANEMO_0_BASE+4)
int main()
{ 
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00315 	stw	ra,12(sp)
    8070:	dc800215 	stw	r18,8(sp)
    8074:	dc400115 	stw	r17,4(sp)
  alt_putstr("Hello from Nios II!\n");
  unsigned int data = 25;
  /* Event loop never exits. */
  IOWR_32DIRECT(TEST_ANEMO_0_BASE, 0, 0x2);
    8078:	04000074 	movhi	r16,1
#include "io.h"

#define reg_inFreq (unsigned int *)(TEST_ANEMO_0_BASE+4)
int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    807c:	0008b2c0 	call	8b2c <alt_putstr>
  unsigned int data = 25;
  /* Event loop never exits. */
  IOWR_32DIRECT(TEST_ANEMO_0_BASE, 0, 0x2);
    8080:	84041004 	addi	r16,r16,4160
    8084:	00800084 	movi	r2,2
    8088:	80800035 	stwio	r2,0(r16)
  while (1) {
	  IOWR_32DIRECT(TEST_ANEMO_0_BASE, 0, 0x0);
	  printf("dataReg = %08X\n",	IORD_32DIRECT(TEST_ANEMO_0_BASE+0, 0));
	  data = IORD_32DIRECT(TEST_ANEMO_0_BASE+4, 0);
    808c:	04800074 	movhi	r18,1
    8090:	94841104 	addi	r18,r18,4164
  alt_putstr("Hello from Nios II!\n");
  unsigned int data = 25;
  /* Event loop never exits. */
  IOWR_32DIRECT(TEST_ANEMO_0_BASE, 0, 0x2);
  while (1) {
	  IOWR_32DIRECT(TEST_ANEMO_0_BASE, 0, 0x0);
    8094:	80000035 	stwio	zero,0(r16)
	  printf("dataReg = %08X\n",	IORD_32DIRECT(TEST_ANEMO_0_BASE+0, 0));
    8098:	81400037 	ldwio	r5,0(r16)
    809c:	01000074 	movhi	r4,1
    80a0:	21233404 	addi	r4,r4,-29488
    80a4:	00081180 	call	8118 <printf>
	  data = IORD_32DIRECT(TEST_ANEMO_0_BASE+4, 0);
    80a8:	94400037 	ldwio	r17,0(r18)
	  printf("dataHex = %08X\n", data	);
    80ac:	01000074 	movhi	r4,1
    80b0:	880b883a 	mov	r5,r17
    80b4:	21233804 	addi	r4,r4,-29472
    80b8:	00081180 	call	8118 <printf>
	  data = 0xFF & data ;
	  printf("Freq  = %u \n", data	);
    80bc:	01000074 	movhi	r4,1
    80c0:	89403fcc 	andi	r5,r17,255
    80c4:	21233c04 	addi	r4,r4,-29456
    80c8:	00081180 	call	8118 <printf>
	  usleep(500000);
    80cc:	01000234 	movhi	r4,8
    80d0:	21284804 	addi	r4,r4,-24288
    80d4:	0008b640 	call	8b64 <usleep>
    80d8:	003fee06 	br	8094 <_gp+0xffff72b4>

000080dc <_printf_r>:
    80dc:	defffd04 	addi	sp,sp,-12
    80e0:	dfc00015 	stw	ra,0(sp)
    80e4:	d9800115 	stw	r6,4(sp)
    80e8:	d9c00215 	stw	r7,8(sp)
    80ec:	20c00217 	ldw	r3,8(r4)
    80f0:	01800074 	movhi	r6,1
    80f4:	31a1c604 	addi	r6,r6,-30952
    80f8:	19800115 	stw	r6,4(r3)
    80fc:	280d883a 	mov	r6,r5
    8100:	21400217 	ldw	r5,8(r4)
    8104:	d9c00104 	addi	r7,sp,4
    8108:	00081d00 	call	81d0 <___vfprintf_internal_r>
    810c:	dfc00017 	ldw	ra,0(sp)
    8110:	dec00304 	addi	sp,sp,12
    8114:	f800283a 	ret

00008118 <printf>:
    8118:	defffc04 	addi	sp,sp,-16
    811c:	dfc00015 	stw	ra,0(sp)
    8120:	d9400115 	stw	r5,4(sp)
    8124:	d9800215 	stw	r6,8(sp)
    8128:	d9c00315 	stw	r7,12(sp)
    812c:	00800074 	movhi	r2,1
    8130:	10a37904 	addi	r2,r2,-29212
    8134:	10800017 	ldw	r2,0(r2)
    8138:	01400074 	movhi	r5,1
    813c:	2961c604 	addi	r5,r5,-30952
    8140:	10c00217 	ldw	r3,8(r2)
    8144:	d9800104 	addi	r6,sp,4
    8148:	19400115 	stw	r5,4(r3)
    814c:	200b883a 	mov	r5,r4
    8150:	11000217 	ldw	r4,8(r2)
    8154:	00086fc0 	call	86fc <__vfprintf_internal>
    8158:	dfc00017 	ldw	ra,0(sp)
    815c:	dec00404 	addi	sp,sp,16
    8160:	f800283a 	ret

00008164 <print_repeat>:
    8164:	defffb04 	addi	sp,sp,-20
    8168:	dc800315 	stw	r18,12(sp)
    816c:	dc400215 	stw	r17,8(sp)
    8170:	dc000115 	stw	r16,4(sp)
    8174:	dfc00415 	stw	ra,16(sp)
    8178:	2025883a 	mov	r18,r4
    817c:	2823883a 	mov	r17,r5
    8180:	d9800005 	stb	r6,0(sp)
    8184:	3821883a 	mov	r16,r7
    8188:	04000a0e 	bge	zero,r16,81b4 <print_repeat+0x50>
    818c:	88800117 	ldw	r2,4(r17)
    8190:	01c00044 	movi	r7,1
    8194:	d80d883a 	mov	r6,sp
    8198:	880b883a 	mov	r5,r17
    819c:	9009883a 	mov	r4,r18
    81a0:	103ee83a 	callr	r2
    81a4:	843fffc4 	addi	r16,r16,-1
    81a8:	103ff726 	beq	r2,zero,8188 <_gp+0xffff73a8>
    81ac:	00bfffc4 	movi	r2,-1
    81b0:	00000106 	br	81b8 <print_repeat+0x54>
    81b4:	0005883a 	mov	r2,zero
    81b8:	dfc00417 	ldw	ra,16(sp)
    81bc:	dc800317 	ldw	r18,12(sp)
    81c0:	dc400217 	ldw	r17,8(sp)
    81c4:	dc000117 	ldw	r16,4(sp)
    81c8:	dec00504 	addi	sp,sp,20
    81cc:	f800283a 	ret

000081d0 <___vfprintf_internal_r>:
    81d0:	deffe504 	addi	sp,sp,-108
    81d4:	d8c00804 	addi	r3,sp,32
    81d8:	ddc01815 	stw	r23,96(sp)
    81dc:	dd801715 	stw	r22,92(sp)
    81e0:	dd401615 	stw	r21,88(sp)
    81e4:	dd001515 	stw	r20,84(sp)
    81e8:	dcc01415 	stw	r19,80(sp)
    81ec:	dc801315 	stw	r18,76(sp)
    81f0:	dc401215 	stw	r17,72(sp)
    81f4:	dc001115 	stw	r16,68(sp)
    81f8:	dfc01a15 	stw	ra,104(sp)
    81fc:	df001915 	stw	fp,100(sp)
    8200:	2029883a 	mov	r20,r4
    8204:	2823883a 	mov	r17,r5
    8208:	382d883a 	mov	r22,r7
    820c:	d9800f15 	stw	r6,60(sp)
    8210:	0021883a 	mov	r16,zero
    8214:	d8000e15 	stw	zero,56(sp)
    8218:	d8000a15 	stw	zero,40(sp)
    821c:	002b883a 	mov	r21,zero
    8220:	0027883a 	mov	r19,zero
    8224:	0025883a 	mov	r18,zero
    8228:	d8000c15 	stw	zero,48(sp)
    822c:	d8000b15 	stw	zero,44(sp)
    8230:	002f883a 	mov	r23,zero
    8234:	d8c00915 	stw	r3,36(sp)
    8238:	d8c00f17 	ldw	r3,60(sp)
    823c:	19000003 	ldbu	r4,0(r3)
    8240:	20803fcc 	andi	r2,r4,255
    8244:	1080201c 	xori	r2,r2,128
    8248:	10bfe004 	addi	r2,r2,-128
    824c:	10011e26 	beq	r2,zero,86c8 <___vfprintf_internal_r+0x4f8>
    8250:	00c00044 	movi	r3,1
    8254:	b8c01426 	beq	r23,r3,82a8 <___vfprintf_internal_r+0xd8>
    8258:	1dc00216 	blt	r3,r23,8264 <___vfprintf_internal_r+0x94>
    825c:	b8000626 	beq	r23,zero,8278 <___vfprintf_internal_r+0xa8>
    8260:	00011506 	br	86b8 <___vfprintf_internal_r+0x4e8>
    8264:	01400084 	movi	r5,2
    8268:	b9401d26 	beq	r23,r5,82e0 <___vfprintf_internal_r+0x110>
    826c:	014000c4 	movi	r5,3
    8270:	b9402b26 	beq	r23,r5,8320 <___vfprintf_internal_r+0x150>
    8274:	00011006 	br	86b8 <___vfprintf_internal_r+0x4e8>
    8278:	01400944 	movi	r5,37
    827c:	1140fc26 	beq	r2,r5,8670 <___vfprintf_internal_r+0x4a0>
    8280:	88800117 	ldw	r2,4(r17)
    8284:	d9000005 	stb	r4,0(sp)
    8288:	01c00044 	movi	r7,1
    828c:	d80d883a 	mov	r6,sp
    8290:	880b883a 	mov	r5,r17
    8294:	a009883a 	mov	r4,r20
    8298:	103ee83a 	callr	r2
    829c:	1000d81e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    82a0:	84000044 	addi	r16,r16,1
    82a4:	00010406 	br	86b8 <___vfprintf_internal_r+0x4e8>
    82a8:	01400c04 	movi	r5,48
    82ac:	1140fa26 	beq	r2,r5,8698 <___vfprintf_internal_r+0x4c8>
    82b0:	01400944 	movi	r5,37
    82b4:	11400a1e 	bne	r2,r5,82e0 <___vfprintf_internal_r+0x110>
    82b8:	d8800005 	stb	r2,0(sp)
    82bc:	88800117 	ldw	r2,4(r17)
    82c0:	b80f883a 	mov	r7,r23
    82c4:	d80d883a 	mov	r6,sp
    82c8:	880b883a 	mov	r5,r17
    82cc:	a009883a 	mov	r4,r20
    82d0:	103ee83a 	callr	r2
    82d4:	1000ca1e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    82d8:	84000044 	addi	r16,r16,1
    82dc:	0000f506 	br	86b4 <___vfprintf_internal_r+0x4e4>
    82e0:	25fff404 	addi	r23,r4,-48
    82e4:	bdc03fcc 	andi	r23,r23,255
    82e8:	00c00244 	movi	r3,9
    82ec:	1dc00936 	bltu	r3,r23,8314 <___vfprintf_internal_r+0x144>
    82f0:	00bfffc4 	movi	r2,-1
    82f4:	90800426 	beq	r18,r2,8308 <___vfprintf_internal_r+0x138>
    82f8:	01400284 	movi	r5,10
    82fc:	9009883a 	mov	r4,r18
    8300:	00089f80 	call	89f8 <__mulsi3>
    8304:	00000106 	br	830c <___vfprintf_internal_r+0x13c>
    8308:	0005883a 	mov	r2,zero
    830c:	b8a5883a 	add	r18,r23,r2
    8310:	0000e206 	br	869c <___vfprintf_internal_r+0x4cc>
    8314:	01400b84 	movi	r5,46
    8318:	1140e426 	beq	r2,r5,86ac <___vfprintf_internal_r+0x4dc>
    831c:	05c00084 	movi	r23,2
    8320:	213ff404 	addi	r4,r4,-48
    8324:	27003fcc 	andi	fp,r4,255
    8328:	00c00244 	movi	r3,9
    832c:	1f000936 	bltu	r3,fp,8354 <___vfprintf_internal_r+0x184>
    8330:	00bfffc4 	movi	r2,-1
    8334:	98800426 	beq	r19,r2,8348 <___vfprintf_internal_r+0x178>
    8338:	01400284 	movi	r5,10
    833c:	9809883a 	mov	r4,r19
    8340:	00089f80 	call	89f8 <__mulsi3>
    8344:	00000106 	br	834c <___vfprintf_internal_r+0x17c>
    8348:	0005883a 	mov	r2,zero
    834c:	e0a7883a 	add	r19,fp,r2
    8350:	0000d906 	br	86b8 <___vfprintf_internal_r+0x4e8>
    8354:	00c01b04 	movi	r3,108
    8358:	10c0d226 	beq	r2,r3,86a4 <___vfprintf_internal_r+0x4d4>
    835c:	013fffc4 	movi	r4,-1
    8360:	99000226 	beq	r19,r4,836c <___vfprintf_internal_r+0x19c>
    8364:	d8000b15 	stw	zero,44(sp)
    8368:	00000106 	br	8370 <___vfprintf_internal_r+0x1a0>
    836c:	04c00044 	movi	r19,1
    8370:	01001a44 	movi	r4,105
    8374:	11001626 	beq	r2,r4,83d0 <___vfprintf_internal_r+0x200>
    8378:	20800916 	blt	r4,r2,83a0 <___vfprintf_internal_r+0x1d0>
    837c:	010018c4 	movi	r4,99
    8380:	11008826 	beq	r2,r4,85a4 <___vfprintf_internal_r+0x3d4>
    8384:	01001904 	movi	r4,100
    8388:	11001126 	beq	r2,r4,83d0 <___vfprintf_internal_r+0x200>
    838c:	01001604 	movi	r4,88
    8390:	1100c81e 	bne	r2,r4,86b4 <___vfprintf_internal_r+0x4e4>
    8394:	00c00044 	movi	r3,1
    8398:	d8c00e15 	stw	r3,56(sp)
    839c:	00001506 	br	83f4 <___vfprintf_internal_r+0x224>
    83a0:	01001cc4 	movi	r4,115
    83a4:	11009826 	beq	r2,r4,8608 <___vfprintf_internal_r+0x438>
    83a8:	20800416 	blt	r4,r2,83bc <___vfprintf_internal_r+0x1ec>
    83ac:	01001bc4 	movi	r4,111
    83b0:	1100c01e 	bne	r2,r4,86b4 <___vfprintf_internal_r+0x4e4>
    83b4:	05400204 	movi	r21,8
    83b8:	00000f06 	br	83f8 <___vfprintf_internal_r+0x228>
    83bc:	01001d44 	movi	r4,117
    83c0:	11000d26 	beq	r2,r4,83f8 <___vfprintf_internal_r+0x228>
    83c4:	01001e04 	movi	r4,120
    83c8:	11000a26 	beq	r2,r4,83f4 <___vfprintf_internal_r+0x224>
    83cc:	0000b906 	br	86b4 <___vfprintf_internal_r+0x4e4>
    83d0:	d8c00a17 	ldw	r3,40(sp)
    83d4:	b7000104 	addi	fp,r22,4
    83d8:	18000726 	beq	r3,zero,83f8 <___vfprintf_internal_r+0x228>
    83dc:	df000d15 	stw	fp,52(sp)
    83e0:	b5c00017 	ldw	r23,0(r22)
    83e4:	b800080e 	bge	r23,zero,8408 <___vfprintf_internal_r+0x238>
    83e8:	05efc83a 	sub	r23,zero,r23
    83ec:	02400044 	movi	r9,1
    83f0:	00000606 	br	840c <___vfprintf_internal_r+0x23c>
    83f4:	05400404 	movi	r21,16
    83f8:	b0c00104 	addi	r3,r22,4
    83fc:	d8c00d15 	stw	r3,52(sp)
    8400:	b5c00017 	ldw	r23,0(r22)
    8404:	d8000a15 	stw	zero,40(sp)
    8408:	0013883a 	mov	r9,zero
    840c:	d839883a 	mov	fp,sp
    8410:	b8001726 	beq	r23,zero,8470 <___vfprintf_internal_r+0x2a0>
    8414:	a80b883a 	mov	r5,r21
    8418:	b809883a 	mov	r4,r23
    841c:	da401015 	stw	r9,64(sp)
    8420:	000893c0 	call	893c <__udivsi3>
    8424:	a80b883a 	mov	r5,r21
    8428:	1009883a 	mov	r4,r2
    842c:	102d883a 	mov	r22,r2
    8430:	00089f80 	call	89f8 <__mulsi3>
    8434:	b885c83a 	sub	r2,r23,r2
    8438:	00c00244 	movi	r3,9
    843c:	da401017 	ldw	r9,64(sp)
    8440:	18800216 	blt	r3,r2,844c <___vfprintf_internal_r+0x27c>
    8444:	10800c04 	addi	r2,r2,48
    8448:	00000506 	br	8460 <___vfprintf_internal_r+0x290>
    844c:	d8c00e17 	ldw	r3,56(sp)
    8450:	18000226 	beq	r3,zero,845c <___vfprintf_internal_r+0x28c>
    8454:	10800dc4 	addi	r2,r2,55
    8458:	00000106 	br	8460 <___vfprintf_internal_r+0x290>
    845c:	108015c4 	addi	r2,r2,87
    8460:	e0800005 	stb	r2,0(fp)
    8464:	b02f883a 	mov	r23,r22
    8468:	e7000044 	addi	fp,fp,1
    846c:	003fe806 	br	8410 <_gp+0xffff7630>
    8470:	e6efc83a 	sub	r23,fp,sp
    8474:	9dc5c83a 	sub	r2,r19,r23
    8478:	0080090e 	bge	zero,r2,84a0 <___vfprintf_internal_r+0x2d0>
    847c:	e085883a 	add	r2,fp,r2
    8480:	01400c04 	movi	r5,48
    8484:	d8c00917 	ldw	r3,36(sp)
    8488:	e009883a 	mov	r4,fp
    848c:	e0c0032e 	bgeu	fp,r3,849c <___vfprintf_internal_r+0x2cc>
    8490:	e7000044 	addi	fp,fp,1
    8494:	21400005 	stb	r5,0(r4)
    8498:	e0bffa1e 	bne	fp,r2,8484 <_gp+0xffff76a4>
    849c:	e6efc83a 	sub	r23,fp,sp
    84a0:	d8c00b17 	ldw	r3,44(sp)
    84a4:	4dd1883a 	add	r8,r9,r23
    84a8:	922dc83a 	sub	r22,r18,r8
    84ac:	18001626 	beq	r3,zero,8508 <___vfprintf_internal_r+0x338>
    84b0:	48000a26 	beq	r9,zero,84dc <___vfprintf_internal_r+0x30c>
    84b4:	00800b44 	movi	r2,45
    84b8:	d8800805 	stb	r2,32(sp)
    84bc:	88800117 	ldw	r2,4(r17)
    84c0:	01c00044 	movi	r7,1
    84c4:	d9800804 	addi	r6,sp,32
    84c8:	880b883a 	mov	r5,r17
    84cc:	a009883a 	mov	r4,r20
    84d0:	103ee83a 	callr	r2
    84d4:	10004a1e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    84d8:	84000044 	addi	r16,r16,1
    84dc:	0580070e 	bge	zero,r22,84fc <___vfprintf_internal_r+0x32c>
    84e0:	b00f883a 	mov	r7,r22
    84e4:	01800c04 	movi	r6,48
    84e8:	880b883a 	mov	r5,r17
    84ec:	a009883a 	mov	r4,r20
    84f0:	00081640 	call	8164 <print_repeat>
    84f4:	1000421e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    84f8:	85a1883a 	add	r16,r16,r22
    84fc:	e02d883a 	mov	r22,fp
    8500:	bf2fc83a 	sub	r23,r23,fp
    8504:	00002006 	br	8588 <___vfprintf_internal_r+0x3b8>
    8508:	0580090e 	bge	zero,r22,8530 <___vfprintf_internal_r+0x360>
    850c:	b00f883a 	mov	r7,r22
    8510:	01800804 	movi	r6,32
    8514:	880b883a 	mov	r5,r17
    8518:	a009883a 	mov	r4,r20
    851c:	da401015 	stw	r9,64(sp)
    8520:	00081640 	call	8164 <print_repeat>
    8524:	da401017 	ldw	r9,64(sp)
    8528:	1000351e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    852c:	85a1883a 	add	r16,r16,r22
    8530:	483ff226 	beq	r9,zero,84fc <_gp+0xffff771c>
    8534:	00800b44 	movi	r2,45
    8538:	d8800805 	stb	r2,32(sp)
    853c:	88800117 	ldw	r2,4(r17)
    8540:	01c00044 	movi	r7,1
    8544:	d9800804 	addi	r6,sp,32
    8548:	880b883a 	mov	r5,r17
    854c:	a009883a 	mov	r4,r20
    8550:	103ee83a 	callr	r2
    8554:	10002a1e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    8558:	84000044 	addi	r16,r16,1
    855c:	003fe706 	br	84fc <_gp+0xffff771c>
    8560:	b5bfffc4 	addi	r22,r22,-1
    8564:	b0800003 	ldbu	r2,0(r22)
    8568:	01c00044 	movi	r7,1
    856c:	d9800804 	addi	r6,sp,32
    8570:	d8800805 	stb	r2,32(sp)
    8574:	88800117 	ldw	r2,4(r17)
    8578:	880b883a 	mov	r5,r17
    857c:	a009883a 	mov	r4,r20
    8580:	103ee83a 	callr	r2
    8584:	10001e1e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    8588:	8585c83a 	sub	r2,r16,r22
    858c:	b5c9883a 	add	r4,r22,r23
    8590:	e085883a 	add	r2,fp,r2
    8594:	013ff216 	blt	zero,r4,8560 <_gp+0xffff7780>
    8598:	1021883a 	mov	r16,r2
    859c:	dd800d17 	ldw	r22,52(sp)
    85a0:	00004406 	br	86b4 <___vfprintf_internal_r+0x4e4>
    85a4:	00800044 	movi	r2,1
    85a8:	1480080e 	bge	r2,r18,85cc <___vfprintf_internal_r+0x3fc>
    85ac:	95ffffc4 	addi	r23,r18,-1
    85b0:	b80f883a 	mov	r7,r23
    85b4:	01800804 	movi	r6,32
    85b8:	880b883a 	mov	r5,r17
    85bc:	a009883a 	mov	r4,r20
    85c0:	00081640 	call	8164 <print_repeat>
    85c4:	10000e1e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    85c8:	85e1883a 	add	r16,r16,r23
    85cc:	b0800017 	ldw	r2,0(r22)
    85d0:	01c00044 	movi	r7,1
    85d4:	d80d883a 	mov	r6,sp
    85d8:	d8800005 	stb	r2,0(sp)
    85dc:	88800117 	ldw	r2,4(r17)
    85e0:	880b883a 	mov	r5,r17
    85e4:	a009883a 	mov	r4,r20
    85e8:	b5c00104 	addi	r23,r22,4
    85ec:	103ee83a 	callr	r2
    85f0:	1000031e 	bne	r2,zero,8600 <___vfprintf_internal_r+0x430>
    85f4:	84000044 	addi	r16,r16,1
    85f8:	b82d883a 	mov	r22,r23
    85fc:	00002d06 	br	86b4 <___vfprintf_internal_r+0x4e4>
    8600:	00bfffc4 	movi	r2,-1
    8604:	00003106 	br	86cc <___vfprintf_internal_r+0x4fc>
    8608:	b5c00017 	ldw	r23,0(r22)
    860c:	b7000104 	addi	fp,r22,4
    8610:	b809883a 	mov	r4,r23
    8614:	00087d00 	call	87d0 <strlen>
    8618:	9091c83a 	sub	r8,r18,r2
    861c:	102d883a 	mov	r22,r2
    8620:	0200090e 	bge	zero,r8,8648 <___vfprintf_internal_r+0x478>
    8624:	400f883a 	mov	r7,r8
    8628:	01800804 	movi	r6,32
    862c:	880b883a 	mov	r5,r17
    8630:	a009883a 	mov	r4,r20
    8634:	da001015 	stw	r8,64(sp)
    8638:	00081640 	call	8164 <print_repeat>
    863c:	da001017 	ldw	r8,64(sp)
    8640:	103fef1e 	bne	r2,zero,8600 <_gp+0xffff7820>
    8644:	8221883a 	add	r16,r16,r8
    8648:	88800117 	ldw	r2,4(r17)
    864c:	b00f883a 	mov	r7,r22
    8650:	b80d883a 	mov	r6,r23
    8654:	880b883a 	mov	r5,r17
    8658:	a009883a 	mov	r4,r20
    865c:	103ee83a 	callr	r2
    8660:	103fe71e 	bne	r2,zero,8600 <_gp+0xffff7820>
    8664:	85a1883a 	add	r16,r16,r22
    8668:	e02d883a 	mov	r22,fp
    866c:	00001106 	br	86b4 <___vfprintf_internal_r+0x4e4>
    8670:	00c00044 	movi	r3,1
    8674:	04ffffc4 	movi	r19,-1
    8678:	d8000e15 	stw	zero,56(sp)
    867c:	d8c00a15 	stw	r3,40(sp)
    8680:	05400284 	movi	r21,10
    8684:	9825883a 	mov	r18,r19
    8688:	d8000c15 	stw	zero,48(sp)
    868c:	d8000b15 	stw	zero,44(sp)
    8690:	182f883a 	mov	r23,r3
    8694:	00000806 	br	86b8 <___vfprintf_internal_r+0x4e8>
    8698:	ddc00b15 	stw	r23,44(sp)
    869c:	05c00084 	movi	r23,2
    86a0:	00000506 	br	86b8 <___vfprintf_internal_r+0x4e8>
    86a4:	00c00044 	movi	r3,1
    86a8:	d8c00c15 	stw	r3,48(sp)
    86ac:	05c000c4 	movi	r23,3
    86b0:	00000106 	br	86b8 <___vfprintf_internal_r+0x4e8>
    86b4:	002f883a 	mov	r23,zero
    86b8:	d8c00f17 	ldw	r3,60(sp)
    86bc:	18c00044 	addi	r3,r3,1
    86c0:	d8c00f15 	stw	r3,60(sp)
    86c4:	003edc06 	br	8238 <_gp+0xffff7458>
    86c8:	8005883a 	mov	r2,r16
    86cc:	dfc01a17 	ldw	ra,104(sp)
    86d0:	df001917 	ldw	fp,100(sp)
    86d4:	ddc01817 	ldw	r23,96(sp)
    86d8:	dd801717 	ldw	r22,92(sp)
    86dc:	dd401617 	ldw	r21,88(sp)
    86e0:	dd001517 	ldw	r20,84(sp)
    86e4:	dcc01417 	ldw	r19,80(sp)
    86e8:	dc801317 	ldw	r18,76(sp)
    86ec:	dc401217 	ldw	r17,72(sp)
    86f0:	dc001117 	ldw	r16,68(sp)
    86f4:	dec01b04 	addi	sp,sp,108
    86f8:	f800283a 	ret

000086fc <__vfprintf_internal>:
    86fc:	00800074 	movhi	r2,1
    8700:	10a37904 	addi	r2,r2,-29212
    8704:	300f883a 	mov	r7,r6
    8708:	280d883a 	mov	r6,r5
    870c:	200b883a 	mov	r5,r4
    8710:	11000017 	ldw	r4,0(r2)
    8714:	00081d01 	jmpi	81d0 <___vfprintf_internal_r>

00008718 <__sfvwrite_small_dev>:
    8718:	2880000b 	ldhu	r2,0(r5)
    871c:	1080020c 	andi	r2,r2,8
    8720:	10002126 	beq	r2,zero,87a8 <__sfvwrite_small_dev+0x90>
    8724:	2880008f 	ldh	r2,2(r5)
    8728:	defffa04 	addi	sp,sp,-24
    872c:	dc000015 	stw	r16,0(sp)
    8730:	dfc00515 	stw	ra,20(sp)
    8734:	dd000415 	stw	r20,16(sp)
    8738:	dcc00315 	stw	r19,12(sp)
    873c:	dc800215 	stw	r18,8(sp)
    8740:	dc400115 	stw	r17,4(sp)
    8744:	2821883a 	mov	r16,r5
    8748:	10001216 	blt	r2,zero,8794 <__sfvwrite_small_dev+0x7c>
    874c:	2027883a 	mov	r19,r4
    8750:	3025883a 	mov	r18,r6
    8754:	3823883a 	mov	r17,r7
    8758:	05010004 	movi	r20,1024
    875c:	04400b0e 	bge	zero,r17,878c <__sfvwrite_small_dev+0x74>
    8760:	880f883a 	mov	r7,r17
    8764:	a440010e 	bge	r20,r17,876c <__sfvwrite_small_dev+0x54>
    8768:	01c10004 	movi	r7,1024
    876c:	8140008f 	ldh	r5,2(r16)
    8770:	900d883a 	mov	r6,r18
    8774:	9809883a 	mov	r4,r19
    8778:	00087ec0 	call	87ec <_write_r>
    877c:	0080050e 	bge	zero,r2,8794 <__sfvwrite_small_dev+0x7c>
    8780:	88a3c83a 	sub	r17,r17,r2
    8784:	90a5883a 	add	r18,r18,r2
    8788:	003ff406 	br	875c <_gp+0xffff797c>
    878c:	0005883a 	mov	r2,zero
    8790:	00000706 	br	87b0 <__sfvwrite_small_dev+0x98>
    8794:	8080000b 	ldhu	r2,0(r16)
    8798:	10801014 	ori	r2,r2,64
    879c:	8080000d 	sth	r2,0(r16)
    87a0:	00bfffc4 	movi	r2,-1
    87a4:	00000206 	br	87b0 <__sfvwrite_small_dev+0x98>
    87a8:	00bfffc4 	movi	r2,-1
    87ac:	f800283a 	ret
    87b0:	dfc00517 	ldw	ra,20(sp)
    87b4:	dd000417 	ldw	r20,16(sp)
    87b8:	dcc00317 	ldw	r19,12(sp)
    87bc:	dc800217 	ldw	r18,8(sp)
    87c0:	dc400117 	ldw	r17,4(sp)
    87c4:	dc000017 	ldw	r16,0(sp)
    87c8:	dec00604 	addi	sp,sp,24
    87cc:	f800283a 	ret

000087d0 <strlen>:
    87d0:	2005883a 	mov	r2,r4
    87d4:	10c00007 	ldb	r3,0(r2)
    87d8:	18000226 	beq	r3,zero,87e4 <strlen+0x14>
    87dc:	10800044 	addi	r2,r2,1
    87e0:	003ffc06 	br	87d4 <_gp+0xffff79f4>
    87e4:	1105c83a 	sub	r2,r2,r4
    87e8:	f800283a 	ret

000087ec <_write_r>:
    87ec:	defffd04 	addi	sp,sp,-12
    87f0:	dc000015 	stw	r16,0(sp)
    87f4:	04000074 	movhi	r16,1
    87f8:	dc400115 	stw	r17,4(sp)
    87fc:	8423b804 	addi	r16,r16,-28960
    8800:	2023883a 	mov	r17,r4
    8804:	2809883a 	mov	r4,r5
    8808:	300b883a 	mov	r5,r6
    880c:	380d883a 	mov	r6,r7
    8810:	dfc00215 	stw	ra,8(sp)
    8814:	80000015 	stw	zero,0(r16)
    8818:	0008b680 	call	8b68 <write>
    881c:	00ffffc4 	movi	r3,-1
    8820:	10c0031e 	bne	r2,r3,8830 <_write_r+0x44>
    8824:	80c00017 	ldw	r3,0(r16)
    8828:	18000126 	beq	r3,zero,8830 <_write_r+0x44>
    882c:	88c00015 	stw	r3,0(r17)
    8830:	dfc00217 	ldw	ra,8(sp)
    8834:	dc400117 	ldw	r17,4(sp)
    8838:	dc000017 	ldw	r16,0(sp)
    883c:	dec00304 	addi	sp,sp,12
    8840:	f800283a 	ret

00008844 <__divsi3>:
    8844:	20001b16 	blt	r4,zero,88b4 <__divsi3+0x70>
    8848:	000f883a 	mov	r7,zero
    884c:	28001616 	blt	r5,zero,88a8 <__divsi3+0x64>
    8850:	200d883a 	mov	r6,r4
    8854:	29001a2e 	bgeu	r5,r4,88c0 <__divsi3+0x7c>
    8858:	00800804 	movi	r2,32
    885c:	00c00044 	movi	r3,1
    8860:	00000106 	br	8868 <__divsi3+0x24>
    8864:	10000d26 	beq	r2,zero,889c <__divsi3+0x58>
    8868:	294b883a 	add	r5,r5,r5
    886c:	10bfffc4 	addi	r2,r2,-1
    8870:	18c7883a 	add	r3,r3,r3
    8874:	293ffb36 	bltu	r5,r4,8864 <_gp+0xffff7a84>
    8878:	0005883a 	mov	r2,zero
    887c:	18000726 	beq	r3,zero,889c <__divsi3+0x58>
    8880:	0005883a 	mov	r2,zero
    8884:	31400236 	bltu	r6,r5,8890 <__divsi3+0x4c>
    8888:	314dc83a 	sub	r6,r6,r5
    888c:	10c4b03a 	or	r2,r2,r3
    8890:	1806d07a 	srli	r3,r3,1
    8894:	280ad07a 	srli	r5,r5,1
    8898:	183ffa1e 	bne	r3,zero,8884 <_gp+0xffff7aa4>
    889c:	38000126 	beq	r7,zero,88a4 <__divsi3+0x60>
    88a0:	0085c83a 	sub	r2,zero,r2
    88a4:	f800283a 	ret
    88a8:	014bc83a 	sub	r5,zero,r5
    88ac:	39c0005c 	xori	r7,r7,1
    88b0:	003fe706 	br	8850 <_gp+0xffff7a70>
    88b4:	0109c83a 	sub	r4,zero,r4
    88b8:	01c00044 	movi	r7,1
    88bc:	003fe306 	br	884c <_gp+0xffff7a6c>
    88c0:	00c00044 	movi	r3,1
    88c4:	003fee06 	br	8880 <_gp+0xffff7aa0>

000088c8 <__modsi3>:
    88c8:	20001716 	blt	r4,zero,8928 <__modsi3+0x60>
    88cc:	000f883a 	mov	r7,zero
    88d0:	2005883a 	mov	r2,r4
    88d4:	28001216 	blt	r5,zero,8920 <__modsi3+0x58>
    88d8:	2900162e 	bgeu	r5,r4,8934 <__modsi3+0x6c>
    88dc:	01800804 	movi	r6,32
    88e0:	00c00044 	movi	r3,1
    88e4:	00000106 	br	88ec <__modsi3+0x24>
    88e8:	30000a26 	beq	r6,zero,8914 <__modsi3+0x4c>
    88ec:	294b883a 	add	r5,r5,r5
    88f0:	31bfffc4 	addi	r6,r6,-1
    88f4:	18c7883a 	add	r3,r3,r3
    88f8:	293ffb36 	bltu	r5,r4,88e8 <_gp+0xffff7b08>
    88fc:	18000526 	beq	r3,zero,8914 <__modsi3+0x4c>
    8900:	1806d07a 	srli	r3,r3,1
    8904:	11400136 	bltu	r2,r5,890c <__modsi3+0x44>
    8908:	1145c83a 	sub	r2,r2,r5
    890c:	280ad07a 	srli	r5,r5,1
    8910:	183ffb1e 	bne	r3,zero,8900 <_gp+0xffff7b20>
    8914:	38000126 	beq	r7,zero,891c <__modsi3+0x54>
    8918:	0085c83a 	sub	r2,zero,r2
    891c:	f800283a 	ret
    8920:	014bc83a 	sub	r5,zero,r5
    8924:	003fec06 	br	88d8 <_gp+0xffff7af8>
    8928:	0109c83a 	sub	r4,zero,r4
    892c:	01c00044 	movi	r7,1
    8930:	003fe706 	br	88d0 <_gp+0xffff7af0>
    8934:	00c00044 	movi	r3,1
    8938:	003ff106 	br	8900 <_gp+0xffff7b20>

0000893c <__udivsi3>:
    893c:	200d883a 	mov	r6,r4
    8940:	2900152e 	bgeu	r5,r4,8998 <__udivsi3+0x5c>
    8944:	28001416 	blt	r5,zero,8998 <__udivsi3+0x5c>
    8948:	00800804 	movi	r2,32
    894c:	00c00044 	movi	r3,1
    8950:	00000206 	br	895c <__udivsi3+0x20>
    8954:	10000e26 	beq	r2,zero,8990 <__udivsi3+0x54>
    8958:	28000516 	blt	r5,zero,8970 <__udivsi3+0x34>
    895c:	294b883a 	add	r5,r5,r5
    8960:	10bfffc4 	addi	r2,r2,-1
    8964:	18c7883a 	add	r3,r3,r3
    8968:	293ffa36 	bltu	r5,r4,8954 <_gp+0xffff7b74>
    896c:	18000826 	beq	r3,zero,8990 <__udivsi3+0x54>
    8970:	0005883a 	mov	r2,zero
    8974:	31400236 	bltu	r6,r5,8980 <__udivsi3+0x44>
    8978:	314dc83a 	sub	r6,r6,r5
    897c:	10c4b03a 	or	r2,r2,r3
    8980:	1806d07a 	srli	r3,r3,1
    8984:	280ad07a 	srli	r5,r5,1
    8988:	183ffa1e 	bne	r3,zero,8974 <_gp+0xffff7b94>
    898c:	f800283a 	ret
    8990:	0005883a 	mov	r2,zero
    8994:	f800283a 	ret
    8998:	00c00044 	movi	r3,1
    899c:	003ff406 	br	8970 <_gp+0xffff7b90>

000089a0 <__umodsi3>:
    89a0:	2005883a 	mov	r2,r4
    89a4:	2900122e 	bgeu	r5,r4,89f0 <__umodsi3+0x50>
    89a8:	28001116 	blt	r5,zero,89f0 <__umodsi3+0x50>
    89ac:	01800804 	movi	r6,32
    89b0:	00c00044 	movi	r3,1
    89b4:	00000206 	br	89c0 <__umodsi3+0x20>
    89b8:	30000c26 	beq	r6,zero,89ec <__umodsi3+0x4c>
    89bc:	28000516 	blt	r5,zero,89d4 <__umodsi3+0x34>
    89c0:	294b883a 	add	r5,r5,r5
    89c4:	31bfffc4 	addi	r6,r6,-1
    89c8:	18c7883a 	add	r3,r3,r3
    89cc:	293ffa36 	bltu	r5,r4,89b8 <_gp+0xffff7bd8>
    89d0:	18000626 	beq	r3,zero,89ec <__umodsi3+0x4c>
    89d4:	1806d07a 	srli	r3,r3,1
    89d8:	11400136 	bltu	r2,r5,89e0 <__umodsi3+0x40>
    89dc:	1145c83a 	sub	r2,r2,r5
    89e0:	280ad07a 	srli	r5,r5,1
    89e4:	183ffb1e 	bne	r3,zero,89d4 <_gp+0xffff7bf4>
    89e8:	f800283a 	ret
    89ec:	f800283a 	ret
    89f0:	00c00044 	movi	r3,1
    89f4:	003ff706 	br	89d4 <_gp+0xffff7bf4>

000089f8 <__mulsi3>:
    89f8:	0005883a 	mov	r2,zero
    89fc:	20000726 	beq	r4,zero,8a1c <__mulsi3+0x24>
    8a00:	20c0004c 	andi	r3,r4,1
    8a04:	2008d07a 	srli	r4,r4,1
    8a08:	18000126 	beq	r3,zero,8a10 <__mulsi3+0x18>
    8a0c:	1145883a 	add	r2,r2,r5
    8a10:	294b883a 	add	r5,r5,r5
    8a14:	203ffa1e 	bne	r4,zero,8a00 <_gp+0xffff7c20>
    8a18:	f800283a 	ret
    8a1c:	f800283a 	ret

00008a20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8a20:	deffff04 	addi	sp,sp,-4
    8a24:	01000074 	movhi	r4,1
    8a28:	01400074 	movhi	r5,1
    8a2c:	dfc00015 	stw	ra,0(sp)
    8a30:	21234004 	addi	r4,r4,-29440
    8a34:	29637c04 	addi	r5,r5,-29200

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a38:	2140061e 	bne	r4,r5,8a54 <alt_load+0x34>
    8a3c:	01000074 	movhi	r4,1
    8a40:	01400074 	movhi	r5,1
    8a44:	21200804 	addi	r4,r4,-32736
    8a48:	29600804 	addi	r5,r5,-32736
    8a4c:	2140121e 	bne	r4,r5,8a98 <alt_load+0x78>
    8a50:	00000b06 	br	8a80 <alt_load+0x60>
    8a54:	00c00074 	movhi	r3,1
    8a58:	18e37c04 	addi	r3,r3,-29200
    8a5c:	1907c83a 	sub	r3,r3,r4
    8a60:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8a64:	10fff526 	beq	r2,r3,8a3c <_gp+0xffff7c5c>
    {
      *to++ = *from++;
    8a68:	114f883a 	add	r7,r2,r5
    8a6c:	39c00017 	ldw	r7,0(r7)
    8a70:	110d883a 	add	r6,r2,r4
    8a74:	10800104 	addi	r2,r2,4
    8a78:	31c00015 	stw	r7,0(r6)
    8a7c:	003ff906 	br	8a64 <_gp+0xffff7c84>
    8a80:	01000074 	movhi	r4,1
    8a84:	01400074 	movhi	r5,1
    8a88:	21232e04 	addi	r4,r4,-29512
    8a8c:	29632e04 	addi	r5,r5,-29512

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8a90:	2140101e 	bne	r4,r5,8ad4 <alt_load+0xb4>
    8a94:	00000b06 	br	8ac4 <alt_load+0xa4>
    8a98:	00c00074 	movhi	r3,1
    8a9c:	18e00804 	addi	r3,r3,-32736
    8aa0:	1907c83a 	sub	r3,r3,r4
    8aa4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8aa8:	10fff526 	beq	r2,r3,8a80 <_gp+0xffff7ca0>
    {
      *to++ = *from++;
    8aac:	114f883a 	add	r7,r2,r5
    8ab0:	39c00017 	ldw	r7,0(r7)
    8ab4:	110d883a 	add	r6,r2,r4
    8ab8:	10800104 	addi	r2,r2,4
    8abc:	31c00015 	stw	r7,0(r6)
    8ac0:	003ff906 	br	8aa8 <_gp+0xffff7cc8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8ac4:	0008ca80 	call	8ca8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8ac8:	dfc00017 	ldw	ra,0(sp)
    8acc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8ad0:	0008cac1 	jmpi	8cac <alt_icache_flush_all>
    8ad4:	00c00074 	movhi	r3,1
    8ad8:	18e34004 	addi	r3,r3,-29440
    8adc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ae0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8ae4:	18bff726 	beq	r3,r2,8ac4 <_gp+0xffff7ce4>
    {
      *to++ = *from++;
    8ae8:	114f883a 	add	r7,r2,r5
    8aec:	39c00017 	ldw	r7,0(r7)
    8af0:	110d883a 	add	r6,r2,r4
    8af4:	10800104 	addi	r2,r2,4
    8af8:	31c00015 	stw	r7,0(r6)
    8afc:	003ff906 	br	8ae4 <_gp+0xffff7d04>

00008b00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b00:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b04:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8b08:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8b0c:	0008bc80 	call	8bc8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8b10:	0008be80 	call	8be8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b14:	d1a04117 	ldw	r6,-32508(gp)
    8b18:	d1604217 	ldw	r5,-32504(gp)
    8b1c:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8b20:	dfc00017 	ldw	ra,0(sp)
    8b24:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8b28:	000805c1 	jmpi	805c <main>

00008b2c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8b2c:	defffe04 	addi	sp,sp,-8
    8b30:	dc000015 	stw	r16,0(sp)
    8b34:	dfc00115 	stw	ra,4(sp)
    8b38:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b3c:	00087d00 	call	87d0 <strlen>
    8b40:	01000074 	movhi	r4,1
    8b44:	000f883a 	mov	r7,zero
    8b48:	100d883a 	mov	r6,r2
    8b4c:	800b883a 	mov	r5,r16
    8b50:	21237a04 	addi	r4,r4,-29208
#else
    return fputs(str, stdout);
#endif
#endif
}
    8b54:	dfc00117 	ldw	ra,4(sp)
    8b58:	dc000017 	ldw	r16,0(sp)
    8b5c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8b60:	0008bec1 	jmpi	8bec <altera_avalon_jtag_uart_write>

00008b64 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8b64:	0008c201 	jmpi	8c20 <alt_busy_sleep>

00008b68 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8b68:	00800044 	movi	r2,1
    8b6c:	20800226 	beq	r4,r2,8b78 <write+0x10>
    8b70:	00800084 	movi	r2,2
    8b74:	2080041e 	bne	r4,r2,8b88 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8b78:	01000074 	movhi	r4,1
    8b7c:	000f883a 	mov	r7,zero
    8b80:	21237a04 	addi	r4,r4,-29208
    8b84:	0008bec1 	jmpi	8bec <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8b88:	d0a00317 	ldw	r2,-32756(gp)
    8b8c:	10000926 	beq	r2,zero,8bb4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8b90:	deffff04 	addi	sp,sp,-4
    8b94:	dfc00015 	stw	ra,0(sp)
    8b98:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8b9c:	00c01444 	movi	r3,81
    8ba0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8ba4:	00bfffc4 	movi	r2,-1
    8ba8:	dfc00017 	ldw	ra,0(sp)
    8bac:	dec00104 	addi	sp,sp,4
    8bb0:	f800283a 	ret
    8bb4:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8bb8:	00c01444 	movi	r3,81
    8bbc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8bc0:	00bfffc4 	movi	r2,-1
    8bc4:	f800283a 	ret

00008bc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8bc8:	deffff04 	addi	sp,sp,-4
    8bcc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8bd0:	0008cb00 	call	8cb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8bd4:	00800044 	movi	r2,1
    8bd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8bdc:	dfc00017 	ldw	ra,0(sp)
    8be0:	dec00104 	addi	sp,sp,4
    8be4:	f800283a 	ret

00008be8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8be8:	f800283a 	ret

00008bec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8bec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8bf0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8bf4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8bf8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8bfc:	2980072e 	bgeu	r5,r6,8c1c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8c00:	38c00037 	ldwio	r3,0(r7)
    8c04:	18ffffec 	andhi	r3,r3,65535
    8c08:	183ffc26 	beq	r3,zero,8bfc <_gp+0xffff7e1c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8c0c:	28c00007 	ldb	r3,0(r5)
    8c10:	20c00035 	stwio	r3,0(r4)
    8c14:	29400044 	addi	r5,r5,1
    8c18:	003ff806 	br	8bfc <_gp+0xffff7e1c>

  return count;
}
    8c1c:	f800283a 	ret

00008c20 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c20:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c24:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c28:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8c2c:	dc000015 	stw	r16,0(sp)
    8c30:	dfc00115 	stw	ra,4(sp)
    8c34:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8c38:	000893c0 	call	893c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8c3c:	10001026 	beq	r2,zero,8c80 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c40:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c44:	013999b4 	movhi	r4,58982
    8c48:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c4c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c50:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8c54:	297fffc4 	addi	r5,r5,-1
    8c58:	283ffe1e 	bne	r5,zero,8c54 <_gp+0xffff7e74>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c5c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8c60:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8c64:	18bffb16 	blt	r3,r2,8c54 <_gp+0xffff7e74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c68:	01400144 	movi	r5,5
    8c6c:	8009883a 	mov	r4,r16
    8c70:	00089f80 	call	89f8 <__mulsi3>
    8c74:	10bfffc4 	addi	r2,r2,-1
    8c78:	103ffe1e 	bne	r2,zero,8c74 <_gp+0xffff7e94>
    8c7c:	00000506 	br	8c94 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8c80:	01400144 	movi	r5,5
    8c84:	8009883a 	mov	r4,r16
    8c88:	00089f80 	call	89f8 <__mulsi3>
    8c8c:	10bfffc4 	addi	r2,r2,-1
    8c90:	00bffe16 	blt	zero,r2,8c8c <_gp+0xffff7eac>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8c94:	0005883a 	mov	r2,zero
    8c98:	dfc00117 	ldw	ra,4(sp)
    8c9c:	dc000017 	ldw	r16,0(sp)
    8ca0:	dec00204 	addi	sp,sp,8
    8ca4:	f800283a 	ret

00008ca8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8ca8:	f800283a 	ret

00008cac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8cac:	f800283a 	ret

00008cb0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8cb0:	000170fa 	wrctl	ienable,zero
    8cb4:	f800283a 	ret
