
test3.elf:     file format elf32-littlenios2
test3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000001b0 memsz 0x000001b0 flags r-x
    LOAD off    0x000011d0 vaddr 0x000081d0 paddr 0x000081d4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000011d8 vaddr 0x000081d8 paddr 0x000081d8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000011d4  2**0
                  CONTENTS
  2 .text         000001b0  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000081d0  000081d8  000011d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  000081d0  000081d4  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000081d8  000081d8  000011d8  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  000081e4  000081e4  000011d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  000011f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000076d  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000003e7  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000003f9  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000118  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000003e4  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000021  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00002770  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00002780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00003529  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003535  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003536  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00003537  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000353b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000353f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000354e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00003559  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000022  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY
 29 .jdi          00004fda  00000000  00000000  0000358e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000445b5  00000000  00000000  00008568  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000081d0 l    d  .rodata	00000000 .rodata
000081d0 l    d  .rwdata	00000000 .rwdata
000081d8 l    d  .bss	00000000 .bss
000081e4 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test3_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008170 g     F .text	0000002c alt_main
000081d4 g       *ABS*	00000000 __flash_rwdata_start
000081c8 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000081dc g     O .bss	00000004 alt_argv
000101d0 g       *ABS*	00000000 _gp
00008000 g       *ABS*	00000000 __alt_mem_ram
000081e4 g       *ABS*	00000000 __bss_end
000081c0 g     F .text	00000004 alt_dcache_flush_all
000081d4 g       *ABS*	00000000 __ram_rwdata_end
000081d0 g       *ABS*	00000000 __ram_rodata_end
000081d0 g     O .rwdata	00000004 jtag_uart_0
000081e4 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008020 g     F .text	0000003c _start
000081bc g     F .text	00000004 alt_sys_init
000081d0 g       *ABS*	00000000 __ram_rwdata_start
000081d0 g       *ABS*	00000000 __ram_rodata_start
000081e4 g       *ABS*	00000000 __alt_stack_base
000081d8 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000034 main
000081d8 g     O .bss	00000004 alt_envp
000081d0 g       *ABS*	00000000 __flash_rodata_start
0000819c g     F .text	00000020 alt_irq_init
000081e0 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000081d4 g       *ABS*	00000000 _edata
000081e4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000081c4 g     F .text	00000004 alt_icache_flush_all
00008090 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6807414 	ori	gp,gp,464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a07614 	ori	r2,r2,33240

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e07914 	ori	r3,r3,33252

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7e74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080900 	call	8090 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081700 	call	8170 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7e88>

0000805c <main>:
#define freq (unsigned int *)  TEST_PWM_0_BASE
#define duty (unsigned int *) ( TEST_PWM_0_BASE  + 4)
#define control (unsigned int *) ( TEST_PWM_0_BASE  + 8)
 int main()
 {
  *freq = 0x0400;  // divise clk par 1024
    805c:	00800074 	movhi	r2,1
    8060:	00c10004 	movi	r3,1024
    8064:	10840c04 	addi	r2,r2,4144
    8068:	10c00015 	stw	r3,0(r2)
  *duty = 0x0200;
    806c:	00c00074 	movhi	r3,1
    8070:	00808004 	movi	r2,512
    8074:	18c40d04 	addi	r3,r3,4148
    8078:	18800015 	stw	r2,0(r3)
  *control=0x0200;
    807c:	00c00074 	movhi	r3,1
    8080:	18c40e04 	addi	r3,r3,4152
    8084:	18800015 	stw	r2,0(r3)


  return 0;

}
    8088:	0005883a 	mov	r2,zero
    808c:	f800283a 	ret

00008090 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8090:	deffff04 	addi	sp,sp,-4
    8094:	01000074 	movhi	r4,1
    8098:	01400074 	movhi	r5,1
    809c:	dfc00015 	stw	ra,0(sp)
    80a0:	21207404 	addi	r4,r4,-32304
    80a4:	29607504 	addi	r5,r5,-32300

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80a8:	2140061e 	bne	r4,r5,80c4 <alt_load+0x34>
    80ac:	01000074 	movhi	r4,1
    80b0:	01400074 	movhi	r5,1
    80b4:	21200804 	addi	r4,r4,-32736
    80b8:	29600804 	addi	r5,r5,-32736
    80bc:	2140121e 	bne	r4,r5,8108 <alt_load+0x78>
    80c0:	00000b06 	br	80f0 <alt_load+0x60>
    80c4:	00c00074 	movhi	r3,1
    80c8:	18e07504 	addi	r3,r3,-32300
    80cc:	1907c83a 	sub	r3,r3,r4
    80d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    80d4:	10fff526 	beq	r2,r3,80ac <_gp+0xffff7edc>
    {
      *to++ = *from++;
    80d8:	114f883a 	add	r7,r2,r5
    80dc:	39c00017 	ldw	r7,0(r7)
    80e0:	110d883a 	add	r6,r2,r4
    80e4:	10800104 	addi	r2,r2,4
    80e8:	31c00015 	stw	r7,0(r6)
    80ec:	003ff906 	br	80d4 <_gp+0xffff7f04>
    80f0:	01000074 	movhi	r4,1
    80f4:	01400074 	movhi	r5,1
    80f8:	21207404 	addi	r4,r4,-32304
    80fc:	29607404 	addi	r5,r5,-32304

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8100:	2140101e 	bne	r4,r5,8144 <alt_load+0xb4>
    8104:	00000b06 	br	8134 <alt_load+0xa4>
    8108:	00c00074 	movhi	r3,1
    810c:	18e00804 	addi	r3,r3,-32736
    8110:	1907c83a 	sub	r3,r3,r4
    8114:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8118:	10fff526 	beq	r2,r3,80f0 <_gp+0xffff7f20>
    {
      *to++ = *from++;
    811c:	114f883a 	add	r7,r2,r5
    8120:	39c00017 	ldw	r7,0(r7)
    8124:	110d883a 	add	r6,r2,r4
    8128:	10800104 	addi	r2,r2,4
    812c:	31c00015 	stw	r7,0(r6)
    8130:	003ff906 	br	8118 <_gp+0xffff7f48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8134:	00081c00 	call	81c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8138:	dfc00017 	ldw	ra,0(sp)
    813c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8140:	00081c41 	jmpi	81c4 <alt_icache_flush_all>
    8144:	00c00074 	movhi	r3,1
    8148:	18e07404 	addi	r3,r3,-32304
    814c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8150:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8154:	18bff726 	beq	r3,r2,8134 <_gp+0xffff7f64>
    {
      *to++ = *from++;
    8158:	114f883a 	add	r7,r2,r5
    815c:	39c00017 	ldw	r7,0(r7)
    8160:	110d883a 	add	r6,r2,r4
    8164:	10800104 	addi	r2,r2,4
    8168:	31c00015 	stw	r7,0(r6)
    816c:	003ff906 	br	8154 <_gp+0xffff7f84>

00008170 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8170:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8174:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8178:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    817c:	000819c0 	call	819c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8180:	00081bc0 	call	81bc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8184:	d1a00217 	ldw	r6,-32760(gp)
    8188:	d1600317 	ldw	r5,-32756(gp)
    818c:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8190:	dfc00017 	ldw	ra,0(sp)
    8194:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8198:	000805c1 	jmpi	805c <main>

0000819c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    819c:	deffff04 	addi	sp,sp,-4
    81a0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    81a4:	00081c80 	call	81c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    81a8:	00800044 	movi	r2,1
    81ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81b0:	dfc00017 	ldw	ra,0(sp)
    81b4:	dec00104 	addi	sp,sp,4
    81b8:	f800283a 	ret

000081bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    81bc:	f800283a 	ret

000081c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    81c0:	f800283a 	ret

000081c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    81c4:	f800283a 	ret

000081c8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    81c8:	000170fa 	wrctl	ienable,zero
    81cc:	f800283a 	ret
