library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity memo is

port( 
	-- Entree & sortie
	clk_50,clk,valid,continu,start_stop : in std_logic;
	out_compteur: in std_logic_vector(24 downto 0);
	q: out std_logic_vector(24 downto 0);
	data_valid : out std_logic
	);
end memo;

architecture arch_memo of memo is
--Variables
signal temp: std_logic_vector(24 downto 0);
signal temp_data_valid : std_logic;

begin
-- mise en oeuvre de l'architecture
-- OR FALLING_EDGE(clk)
  PROCESS(clk_50) BEGIN
	if rising_edge(clk_50) then 
		if valid = '1' then
		temp_data_valid <='1';
			if continu = '1' then
				if clk = '1' then
				temp <= out_compteur;
				end if;
			else
				if start_stop = '1' then 
					temp <= out_compteur;
					temp_data_valid <='1';
				else 
					temp_data_valid <='0';
				end if;
			end if;
		end if;
	end if;
  END PROCESS;
  q <= temp;
  data_valid <= temp_data_valid;
end arch_memo;
	
_________________compteur avec synchrone______________________________________________


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity compteur is

port( 
	-- Entree & sortie
	clk_50,clk,in_freq: in std_logic;
	q: out std_logic_vector(7 downto 0);
	valid : out std_logic
	);
end compteur;

architecture arch_compteur of compteur is
--Variables
signal compteur: std_logic_vector(7 downto 0);
signal compteur1: std_logic_vector(7 downto 0);
signal compteur2: std_logic_vector(7 downto 0);

signal valid1: std_logic;
signal valid2: std_logic;
--signal temp: std_logic_vector(7 downto 0);
signal temp1: std_logic_vector(7 downto 0);
signal temp2: std_logic_vector(7 downto 0);
--signal test : std_logic;
begin
-- mise en oeuvre de l'architecture ---synchrone-----
-- OR FALLING_EDGE(clk)
-- rising_edge(in_freq)

  PROCESS(clk_50,in_freq,clk) BEGIN
	--Compter front montant
	IF rising_edge(clk_50)   THEN
		 IF clk = '0' THEN
		 --init compteur1
			if compteur1 > 0 then
			temp1<= compteur1; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid1 <= '1';
			end if;
			compteur1<=(OTHERS=>'0');
		 END IF;
		 
    IF in_freq = '1'   THEN

		  IF clk ='1' THEN
			valid1 <= '0';
			compteur1 <= compteur1 + 1;
		  END IF;
    END IF;
	 
	 END IF;
	 
  END PROCESS;
  
  
    PROCESS(clk_50,in_freq,clk) BEGIN
	--Compter front descendant
	IF rising_edge(clk_50)   THEN
		 IF clk = '0' THEN
			if compteur2 > 0 then
			temp2 <= compteur2; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid2 <= '1';
			end if;
			compteur2<=(OTHERS=>'0');
		 END IF;
		 
    IF in_freq ='0'  THEN

		  IF clk ='1' THEN
			valid2 <= '0';
			compteur2 <= compteur2 + 1;
		  END IF;
    END IF;
	 
	 END IF;
  END PROCESS;
  
	compteur <= compteur1 + compteur2;
	valid <= valid1 or valid2 ;
    q <= temp1+temp2;
end arch_compteur;
	

______________________compteur_fonctionnel________________
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity compteur is

port( 
	-- Entree & sortie
	clk,in_freq,raz : in std_logic;
	q: out std_logic_vector(7 downto 0);
	valid : out std_logic
	);
end compteur;

architecture arch_compteur of compteur is
----Variables
--signal compteur: std_logic_vector(7 downto 0);
--signal temp: std_logic_vector(7 downto 0);
--signal test : std_logic;
--begin
---- mise en oeuvre de l'architecture
---- OR FALLING_EDGE(clk)
---- rising_edge(in_freq)
--  PROCESS(in_freq) BEGIN
--	
--    IF rising_edge(in_freq)   THEN
--		  IF raz = '0' THEN
--			if compteur > 0 then
--			temp <= compteur;--(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ‘0’;
--			valid <= '1';
--			end if;
--			compteur<=(OTHERS=>'0');
--		  ELSE
--		  IF clk ='1' THEN
--			valid <= '0';
--			compteur <= compteur + 1;
--		  END IF;
--		  END IF;
--    END IF;
--  END PROCESS;
--   q <= temp;

signal compteur: std_logic_vector(7 downto 0);
signal compteur1: std_logic_vector(7 downto 0);
signal compteur2: std_logic_vector(7 downto 0);

signal valid1: std_logic;
signal valid2: std_logic;
signal temp: std_logic_vector(7 downto 0);
signal temp1: std_logic_vector(7 downto 0);
signal temp2: std_logic_vector(7 downto 0);
signal test : std_logic;
begin
-- mise en oeuvre de l'architecture
-- OR FALLING_EDGE(clk)
-- rising_edge(in_freq)

  PROCESS(in_freq) BEGIN
	--Compter front montant
    IF rising_edge(in_freq)   THEN
		 IF clk = '0' THEN
			if compteur1 > 0 then
			temp1<= compteur1; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid1 <= '1';
			end if;
			compteur1<=(OTHERS=>'0');
		 END IF;
		  IF clk ='1' THEN
			valid1 <= '0';
			compteur1 <= compteur1 + 1;
		  END IF;
    END IF;
  END PROCESS;
  
  
    PROCESS(in_freq) BEGIN
	--Compter front descendant
    IF falling_edge(in_freq)   THEN
		 IF clk = '0' THEN
			if compteur2 > 0 then
			temp2 <= compteur2; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid2 <= '1';
			end if;
			compteur2<=(OTHERS=>'0');
		 END IF;
		 
		  IF clk ='1' THEN
			valid2 <= '0';
			compteur2 <= compteur2 + 1;
		  END IF;
    END IF;
  END PROCESS;
  
	compteur <= compteur1 + compteur2;
	valid <= valid1 or valid2 ;--or valid2 or valid3;
    q <= temp1+temp2;
end arch_compteur;

____________code compteur fonctionnel 2__________________
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity compteur is

port( 
	-- Entree & sortie
	clk,in_freq: in std_logic;
	q: out std_logic_vector(7 downto 0);
	valid : out std_logic
	);
end compteur;

architecture arch_compteur of compteur is
--Variables
signal compteur: std_logic_vector(7 downto 0);
signal compteur1: std_logic_vector(7 downto 0);
signal compteur2: std_logic_vector(7 downto 0);

signal valid1: std_logic;
signal valid2: std_logic;
signal fall: std_logic;
signal rise: std_logic;
--signal temp: std_logic_vector(7 downto 0);
signal temp1: std_logic_vector(7 downto 0);
signal temp2: std_logic_vector(7 downto 0);
--signal test : std_logic;
begin
-- mise en oeuvre de l'architecture 
-- OR FALLING_EDGE(clk)
-- rising_edge(in_freq)

process(clk) begin
if falling_edge(clk) then
		fall <= '0';
end if;
end process;

process(clk) begin
if rising_edge(clk) then
		rise <= '1';
end if;
end process;
	
  PROCESS(in_freq) BEGIN
	--Compter front montant
		
		if fall='0' then
    IF rising_edge(in_freq)  THEN
		 IF clk = '0' THEN
			if compteur1 > 0 then
			temp1<= compteur1; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid1 <= '1';
			end if;
			compteur1<=(OTHERS=>'0');
		 END IF;
		  IF clk ='1' THEN
			valid1 <= '0';
			compteur1 <= compteur1 + 1;
		  END IF;
    END IF;
	 elsif rise = '1' then
	 if compteur1 > 0 then
			temp1<= compteur1; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid1 <= '1';
	 end if;
			compteur1<=(OTHERS=>'0');
	end if;
	 
  END PROCESS;
  
  
    PROCESS(in_freq,clk) BEGIN
	--Compter front descendant

		if fall = '0' then
    IF falling_edge(in_freq) THEN
		 IF clk = '0' THEN
			if compteur2 > 0 then
			temp2 <= compteur2; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid2 <= '1';
			end if;
			compteur2<=(OTHERS=>'0');
		 END IF;
		 
		  IF clk ='1' THEN
			valid2 <= '0';
			compteur2 <= compteur2 + 1;
		  END IF;
    END IF;
	 elsif rise = '1'  then
			if compteur2 > 0 then
			temp2 <= compteur2; --(6 downto 0) & '0' ; --S1 <= A(6 downto 0) & ?0?;
			valid2 <= '1';
			end if;
			compteur2<=(OTHERS=>'0');
	end if;
  END PROCESS;
  
	--compteur <= compteur1 + compteur2;
	valid <= valid1 and valid2 ;--or valid2 or valid3;
   q <= temp1+temp2;
	
end arch_compteur;
	